<div class="container py-5">
  <div class="row mb-4">
    <div class="col-12">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/gallery">Gallery</a></li>
          <li class="breadcrumb-item active" aria-current="page"><%= artwork.title %></li>
        </ol>
      </nav>
    </div>
  </div>

  <div class="row">
    <!-- Artwork Images -->
    <div class="col-lg-8 mb-4">
      <% if (artwork.images && artwork.images.length > 0) { %>
        <div id="artworkCarousel" class="carousel slide mb-4" data-bs-ride="false">
          <div class="carousel-inner">
            <% artwork.images.forEach((image, index) => { %>
              <div class="carousel-item <%= index === 0 ? 'active' : '' %>" style="height: 500px;">
                <img src="<%= image.path %>" class="d-block w-100 h-100" style="object-fit: contain;" alt="<%= artwork.title %> - Image <%= index + 1 %>">
              </div>
            <% }); %>
          </div>
          <% if (artwork.images.length > 1) { %>
            <button class="carousel-control-prev" type="button" data-bs-target="#artworkCarousel" data-bs-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#artworkCarousel" data-bs-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Next</span>
            </button>
          <% } %>
        </div>

        <% if (artwork.images.length > 1) { %>
          <div class="row g-2 mb-4">
            <% artwork.images.forEach((image, index) => { %>
              <div class="col-3 col-md-2">
                <img src="<%= image.thumbnailPath || image.path %>" class="img-thumbnail cursor-pointer" 
                     style="height: 60px; object-fit: cover; cursor: pointer;" 
                     data-bs-target="#artworkCarousel" data-bs-slide-to="<%= index %>" 
                     alt="Thumbnail <%= index + 1 %>">
              </div>
            <% }); %>
          </div>
        <% } %>
      <% } %>

      <!-- Video if available -->
      <% if (artwork.video && (artwork.video.path || artwork.video.embedUrl)) { %>
        <div class="mt-4 video-section">
          <h4 class="mb-3">Video</h4>
          <div class="card">
            <div class="card-body">
              <% if (artwork.video.type === 'file' && artwork.video.path) { %>
                <div class="ratio ratio-16x9">
                  <video controls class="w-100">
                    <source src="<%= artwork.video.path %>" type="video/mp4">
                    Your browser does not support the video tag.
                  </video>
                </div>
              <% } else if (artwork.video.type === 'embed' && artwork.video.embedUrl) { %>
                <div class="ratio ratio-16x9">
                  <iframe src="<%= artwork.video.embedUrl %>" title="<%= artwork.title %> video" allowfullscreen></iframe>
                </div>
              <% } else if (artwork.video.type === 'upload' && artwork.video.path) { %>
                <div class="ratio ratio-16x9">
                  <video controls class="w-100">
                    <source src="<%= artwork.video.path %>" type="video/mp4">
                    Your browser does not support the video tag.
                  </video>
                </div>
              <% } %>
            </div>
          </div>
        </div>
      <% } %>
    </div>

    <!-- Artwork Details -->
    <div class="col-lg-4">
      <h1 class="mb-3"><%= artwork.title %></h1>
      <p class="text-muted mb-4"><%= artwork.year %></p>
      
      <div class="mb-4">
        <% artwork.tags.forEach(tag => { %>
          <a href="/gallery?tag=<%= tag %>" class="badge bg-light text-dark text-decoration-none me-1 mb-1"><%= tag %></a>
        <% }); %>
      </div>
      
      <div class="mb-4">
        <h4>Description</h4>
        <div class="artwork-description" style="word-break: break-word; white-space: pre-line; overflow-wrap: anywhere;">
          <%- artwork.description %>
        </div>
      </div>
      
      <div class="d-grid gap-2">
        <a href="/gallery" class="btn btn-outline-primary">Back to Gallery</a>
        <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#shareModal">
          <i class="bi bi-share"></i> Share
        </button>
      </div>

      <div class="mt-4 d-flex align-items-center">
        <button id="likeButton" class="btn btn-outline-danger me-2"><i class="bi bi-heart"></i></button>
        <span id="likeCount" class="badge bg-secondary">0 Likes</span>
      </div>

      <div class="mt-5">
        <h4>Comments</h4>
        
          <div class="card mb-3">
            <div class="card-body">
              <h5 class="card-title">Leave a Comment</h5>
              <form id="commentForm">
                <div class="mb-3">
                  <textarea class="form-control" id="commentText" rows="3" placeholder="Your comment..." required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Submit Comment</button>
              </form>
            </div>
          </div>
        

        <div id="commentsList" class="list-group">
          <!-- Comments will be loaded here by JavaScript -->
          <p class="text-center text-muted mt-3">Loading comments...</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Related Artworks -->
  <% if (relatedArtworks && relatedArtworks.length > 0) { %>
    <div class="row mt-5">
      <div class="col-12">
        <h3 class="mb-4">Related Artworks</h3>
      </div>
      
      <% relatedArtworks.forEach(related => { %>
        <div class="col-md-4 mb-4">
          <div class="card h-100 shadow-sm">
            <% const mainImage = related.images.find(img => img.isMain) || related.images[0]; %>
            <% if (mainImage) { %>
              <img src="<%= mainImage.thumbnailPath || mainImage.path %>" class="card-img-top" alt="<%= related.title %>" style="height: 200px; object-fit: cover;">
            <% } else { %>
              <div class="bg-secondary" style="height: 200px;"></div>
            <% } %>
            <div class="card-body">
              <h5 class="card-title"><%= related.title %></h5>
              <p class="card-text text-muted"><%= related.year %></p>
              <a href="/gallery/<%= related.slug %>" class="btn btn-sm btn-outline-primary">View Details</a>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>
</div>

<!-- Share Modal -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="shareModalLabel">Share this Artwork</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
          <input type="text" class="form-control" id="shareUrl" value="<%= baseUrl %>/gallery/<%= artwork.slug %>" readonly>
          <button class="btn btn-outline-primary" type="button" id="copyShareUrl">Copy</button>
        </div>
        <div class="d-flex justify-content-center gap-3 mt-4">
          <a href="https://www.facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(baseUrl + '/gallery/' + artwork.slug) %>" target="_blank" class="btn btn-outline-primary">
            <i class="bi bi-facebook"></i>
          </a>
          <a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(baseUrl + '/gallery/' + artwork.slug) %>&text=<%= encodeURIComponent('Check out this artwork: ' + artwork.title) %>" target="_blank" class="btn btn-outline-primary">
            <i class="bi bi-twitter"></i>
          </a>
          <a href="https://pinterest.com/pin/create/button/?url=<%= encodeURIComponent(baseUrl + '/gallery/' + artwork.slug) %>&media=<%= encodeURIComponent(baseUrl + (artwork.images[0] ? artwork.images[0].path : '')) %>&description=<%= encodeURIComponent(artwork.title) %>" target="_blank" class="btn btn-outline-primary">
            <i class="bi bi-pinterest"></i>
          </a>
          <a href="https://wa.me/?text=<%= encodeURIComponent('Check out this artwork: ' + artwork.title + ' ' + baseUrl + '/gallery/' + artwork.slug) %>" target="_blank" class="btn btn-outline-primary">
            <i class="bi bi-whatsapp"></i>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.getElementById('copyShareUrl').addEventListener('click', function() {
    const shareUrl = document.getElementById('shareUrl');
    shareUrl.select();
    document.execCommand('copy');
    this.innerHTML = 'Copied!';
    setTimeout(() => {
      this.innerHTML = 'Copy';
    }, 2000);
  });
</script>

<script>
  const artworkId = "<%= artwork._id %>";

  // Function to generate a random username
  function generateRandomUsername() {
    const adjectives = ['Happy', 'Creative', 'Artistic', 'Vibrant', 'Inspired', 'Dreamy', 'Colorful', 'Unique', 'Bold', 'Gentle'];
    const nouns = ['Artist', 'Viewer', 'Lover', 'Explorer', 'Critic', 'Fan', 'Soul', 'Mind', 'Spirit', 'Creator'];
    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];
    const randomNumber = Math.floor(Math.random() * 1000);
    return `${randomAdjective}${randomNoun}${randomNumber}`;
  }

  // Function to fetch and display comments
  async function fetchComments() {
    try {
      const response = await fetch(`/api/artworks/${artworkId}/comments`);
      const data = await response.json();
      const commentsList = document.getElementById('commentsList');
      commentsList.innerHTML = ''; // Clear existing comments

      if (data.success && data.comments.length > 0) {
        const allComments = data.comments;
        let commentsToShow = 3; // Initially show 3 comments

        function renderComments(comments) {
          commentsList.innerHTML = ''; // Clear before rendering
          comments.forEach(comment => {
            const username = comment.user && comment.user.username ? comment.user.username : generateRandomUsername();
            const commentElement = `
              <div class="list-group-item list-group-item-action flex-column align-items-start">
                <div class="d-flex w-100 justify-content-between">
                  <h5 class="mb-1">${username}</h5>
                  <small>${new Date(comment.createdAt).toLocaleDateString()}</small>
                </div>
                <p class="mb-1">${comment.text}</p>
              </div>
            `;
            commentsList.innerHTML += commentElement;
          });
        }

        renderComments(allComments.slice(0, commentsToShow));

        if (allComments.length > commentsToShow) {
          const viewMoreBtn = document.createElement('button');
          viewMoreBtn.classList.add('btn', 'btn-link', 'mt-2');
          viewMoreBtn.textContent = 'View more comments';
          viewMoreBtn.addEventListener('click', () => {
            commentsToShow = allComments.length; // Show all comments
            renderComments(allComments);
            viewMoreBtn.style.display = 'none'; // Hide button after showing all
          });
          commentsList.appendChild(viewMoreBtn);
        }

      } else {
        commentsList.innerHTML = '<p class="text-center text-muted mt-3">No comments yet.</p>';
      }
    } catch (error) {
      console.error('Error fetching comments:', error);
      document.getElementById('commentsList').innerHTML = '<p class="text-center text-danger mt-3">Error loading comments.</p>';
    }
  }

  // Function to update like count
  async function updateLikeCount() {
    try {
      const response = await fetch(`/api/artworks/${artworkId}/likes/count`);
      const data = await response.json();
      if (data.success) {
        document.getElementById('likeCount').textContent = `${data.count} Likes`;
      }
    } catch (error) {
      console.error('Error fetching like count:', error);
    }
  }

  // Function to update like button status
  async function updateLikeStatus() {
    try {
      const response = await fetch(`/api/artworks/${artworkId}/likes/status`);
      const data = await response.json();
      if (data.success) {
        const likeButton = document.getElementById('likeButton');
        if (data.liked) {
          likeButton.classList.add('btn-danger');
          likeButton.classList.remove('btn-outline-danger');
          likeButton.innerHTML = '<i class="bi bi-heart-fill"></i>'; // Filled heart icon
        } else {
          likeButton.classList.add('btn-outline-danger');
          likeButton.classList.remove('btn-danger');
          likeButton.innerHTML = '<i class="bi bi-heart"></i>'; // Outlined heart icon
        }
      }
    } catch (error) {
      console.error('Error fetching like status:', error);
    }
  }

  // Event listener for comment form submission
  const commentForm = document.getElementById('commentForm');
  if (commentForm) {
    commentForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const commentText = document.getElementById('commentText').value;
  
      try {
        const response = await fetch(`/api/artworks/${artworkId}/comments`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ text: commentText })
        });
        const data = await response.json();
        if (data.success) {
          document.getElementById('commentText').value = '';
          fetchComments(); // Refresh comments
        } else {
          alert(data.message || 'Failed to add comment.');
        }
      } catch (error) {
        console.error('Error submitting comment:', error);
        alert('Error submitting comment.');
      }
    });
  }

  // Event listener for like button
  const likeButton = document.getElementById('likeButton');
  if (likeButton) {
    likeButton.addEventListener('click', async () => {
      try {
        const response = await fetch(`/api/artworks/${artworkId}/likes`, {
          method: 'POST'
        });
        const data = await response.json();
        if (data.success) {
          updateLikeCount();
          updateLikeStatus();
        } else {
          alert(data.message || 'Failed to toggle like.');
        }
      } catch (error) {
        console.error('Error toggling like:', error);
        alert('Error toggling like.');
      }
    });
  }

  // Initial load
  document.addEventListener('DOMContentLoaded', () => {
    fetchComments();
    updateLikeCount();
    // Ensure like button always starts with the correct emoji
    // const likeButton = document.getElementById('likeButton');
    // if (likeButton) {
    //   likeButton.innerHTML = '💔'; // Default to broken heart
    // }
    updateLikeStatus();
  });
</script>